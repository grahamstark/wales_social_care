--
-- Created by ada_generator.py on 2011-11-29 16:58:56.622943
-- 
with Wsc_Db_Data;


with Ada.Containers.Vectors;

with environment;

with db_commons; 
with db_commons.odbc; 

with GNU.DB.SQLCLI;  
with GNU.DB.SQLCLI.Bind;
with GNU.DB.SQLCLI.Info;
with GNU.DB.SQLCLI.Environment_Attribute;
with GNU.DB.SQLCLI.Connection_Attribute;

with Ada.Exceptions;  
with Ada.Strings; 
with Ada.Strings.Wide_Fixed;
with Ada.Characters.Conversions;
with Ada.Strings.Unbounded; 
with text_io;
with Ada.Strings.Maps;


with DB_Logger;

package body Maxima_And_Totals_IO is

   use Ada.Strings.Unbounded;
   use Ada.Exceptions;
   use Ada.Strings;

   package dodbc renames db_commons.odbc;
   package sql renames GNU.DB.SQLCLI;
   package sql_info renames GNU.DB.SQLCLI.Info;
   use sql;
   use base_types;
   --
   -- generic packages to handle each possible type of decimal, if any, go here
   --
   
   --
   -- Select all variables; substring to be competed with output from some criteria
   --
   SELECT_PART : constant String := "select " &  
        "case when sum( la_contributions ) is null then 0.0 else sum( la_contributions ) end as lifetime_la_contributions, " &
        "case when sum( client_contributions ) is null then 0.0 else sum( client_contributions ) end as lifetime_client_contributions, " & 
        "case when sum( gross_care_costs ) is null then 0.0 else sum( gross_care_costs ) end as lifetime_gross_payments, " &
        "case when sum( capital_contribution ) is null then 0.0 else sum( capital_contribution ) end as lifetime_capital_contributions, " & 
        "case when max( la_contributions ) is null then 0.0 else max( la_contributions ) end as  highest_la_contribution " &
        " from personal_results "; 

   
   
   function get_connection return dodbc.Database_Connection is
      use dodbc;
      con : dodbc.Database_Connection := dodbc.Null_Database_Connection;
   begin
      con := dodbc.connect( 
            environment.Get_Server_Name, 
            environment.Get_Username, 
            environment.Get_Password );
      return con;
      exception 
      when Error : others =>  
         DB_Logger.error( "exception " & Exception_Information(Error) ); 
         Raise_Exception( d.DB_Exception'Identity, 
            "getConnection: exception thrown " & Exception_Information(Error) );
   end get_connection;
   

   --
   -- returns true if the primary key parts of Maxima_And_Totals match the defaults in Wsc_Db_Data.Null_Maxima_And_Totals
   --
   --
   -- Does this Maxima_And_Totals equal the default Wsc_Db_Data.Null_Maxima_And_Totals ?
   --
   function Is_Null( Maxima_And_Totals : Wsc_Db_Data.Maxima_And_Totals ) return Boolean is
   use Wsc_Db_Data;
   begin
      return Maxima_And_Totals = Wsc_Db_Data.Null_Maxima_And_Totals;
   end Is_Null;


   
   --
   -- returns the single Maxima_And_Totals matching the primary key fields, or the Wsc_Db_Data.Null_Maxima_And_Totals record
   -- if no such record exists
   --
   function Retrieve_By_PK( Username : Unbounded_String; Run_Id : Unbounded_String; Pid : Unbounded_String; Wave : Unbounded_String ) return Wsc_Db_Data.Maxima_And_Totals is
      l : Wsc_Db_Data.Maxima_And_Totals_List.Vector;
      Maxima_And_Totals : Wsc_Db_Data.Maxima_And_Totals;
      c : d.Criteria;
   begin      
      Add_Username( c, Username );
      Add_Run_Id( c, Run_Id );
      Add_Pid( c, Pid );
      Add_Wave( c, Wave );
      l := retrieve( c );
      if( not Wsc_Db_Data.Maxima_And_Totals_List.is_empty( l ) ) then
         Maxima_And_Totals := Wsc_Db_Data.Maxima_And_Totals_List.First_Element( l );
      else
         Maxima_And_Totals := Wsc_Db_Data.Null_Maxima_And_Totals;
      end if;
      return Maxima_And_Totals;
   end Retrieve_By_PK;

   
   --
   -- Retrieves a list of Wsc_Db_Data.Maxima_And_Totals matching the criteria, or throws an exception
   --
   function Retrieve( c : d.Criteria ) return Wsc_Db_Data.Maxima_And_Totals_List.Vector is
   begin      
      return Retrieve( d.to_string( c ) );
   end Retrieve;

   
   --
   -- Retrieves a list of Wsc_Db_Data.Maxima_And_Totals retrived by the sql string, or throws an exception
   --
   function Retrieve( sqlstr : String ) return Wsc_Db_Data.Maxima_And_Totals_List.Vector is
      type Timestamp_Access is access all SQL_TIMESTAMP_STRUCT;
      type Real_Access is access all Real;
      type String_Access is access all String;

      l : Wsc_Db_Data.Maxima_And_Totals_List.Vector;
      ps : SQLHDBC := SQL_NULL_HANDLE;
      has_data : Boolean := false;
      connection : dodbc.Database_Connection := get_connection;
      query : constant String := SELECT_PART & " " & sqlstr;
      Lifetime_La_Contributions: aliased Real;
      Lifetime_Client_Contributions: aliased Real;
      Lifetime_Gross_Payments: aliased Real;
      Lifetime_Capital_Contributions: aliased Real;
      Highest_La_Contribution: aliased Real;
      --
      -- access variables for any variables retrieved via access types
      --
      Lifetime_La_Contributions_access : Real_Access := Lifetime_La_Contributions'access;
      Lifetime_Client_Contributions_access : Real_Access := Lifetime_Client_Contributions'access;
      Lifetime_Gross_Payments_access : Real_Access := Lifetime_Gross_Payments'access;
      Lifetime_Capital_Contributions_access : Real_Access := Lifetime_Capital_Contributions'access;
      Highest_La_Contribution_access : Real_Access := Highest_La_Contribution'access;
      --
      -- length holders for each retrieved variable
      --
        Lifetime_La_Contributions_len : aliased SQLINTEGER := Lifetime_La_Contributions'Size;
      Lifetime_Client_Contributions_len : aliased SQLINTEGER := Lifetime_Client_Contributions'Size;
      Lifetime_Gross_Payments_len : aliased SQLINTEGER := Lifetime_Gross_Payments'Size;
      Lifetime_Capital_Contributions_len : aliased SQLINTEGER := Lifetime_Capital_Contributions'Size;
      Highest_La_Contribution_len : aliased SQLINTEGER := Highest_La_Contribution'Size;
      Maxima_And_Totals : Wsc_Db_Data.Maxima_And_Totals;
   begin
      DB_Logger.info( "retrieve made this as query " & query );
      begin -- exception block
         ps := dodbc.Initialise_Prepared_Statement( connection.connection, query );       
         SQLBindCol(
            StatementHandle  => ps,
            TargetType       => SQL_C_DOUBLE,
            ColumnNumber     => 1,
            TargetValuePtr   => To_SQLPOINTER( Lifetime_La_Contributions_access.all'address ),
            BufferLength     => 0,
            StrLen_Or_IndPtr => Lifetime_La_Contributions_len'access );
         SQLBindCol(
            StatementHandle  => ps,
            TargetType       => SQL_C_DOUBLE,
            ColumnNumber     => 2,
            TargetValuePtr   => To_SQLPOINTER( Lifetime_Client_Contributions_access.all'address ),
            BufferLength     => 0,
            StrLen_Or_IndPtr => Lifetime_Client_Contributions_len'access );
         SQLBindCol(
            StatementHandle  => ps,
            TargetType       => SQL_C_DOUBLE,
            ColumnNumber     => 3,
            TargetValuePtr   => To_SQLPOINTER( Lifetime_Gross_Payments_access.all'address ),
            BufferLength     => 0,
            StrLen_Or_IndPtr => Lifetime_Gross_Payments_len'access );
         SQLBindCol(
            StatementHandle  => ps,
            TargetType       => SQL_C_DOUBLE,
            ColumnNumber     => 4,
            TargetValuePtr   => To_SQLPOINTER( Lifetime_Capital_Contributions_access.all'address ),
            BufferLength     => 0,
            StrLen_Or_IndPtr => Lifetime_Capital_Contributions_len'access );
         SQLBindCol(
            StatementHandle  => ps,
            TargetType       => SQL_C_DOUBLE,
            ColumnNumber     => 5,
            TargetValuePtr   => To_SQLPOINTER( Highest_La_Contribution_access.all'address ),
            BufferLength     => 0,
            StrLen_Or_IndPtr => Highest_La_Contribution_len'access );
         SQLExecute( ps );
         loop
            dodbc.next_row( ps, has_data );
            if( not has_data ) then
               exit;
            end if;
            Maxima_And_Totals.Lifetime_La_Contributions:= Real( Lifetime_La_Contributions_access.all );
            Maxima_And_Totals.Lifetime_Client_Contributions:= Real( Lifetime_Client_Contributions_access.all );
            Maxima_And_Totals.Lifetime_Gross_Payments:= Real( Lifetime_Gross_Payments_access.all );
            Maxima_And_Totals.Lifetime_Capital_Contributions:= Real( Lifetime_Capital_Contributions_access.all );
            Maxima_And_Totals.Highest_La_Contribution:= Real( Highest_La_Contribution_access.all );
            Wsc_Db_Data.Maxima_And_Totals_List.append( l, Maxima_And_Totals );        
         end loop;
         DB_Logger.info( "retrieve: Query Run OK" );
      exception 
         when No_Data => Null; 
         when Error : others =>
            Raise_Exception( d.DB_Exception'Identity, 
               "retrieve: exception " & Exception_Information(Error) );
      end; -- exception block
      begin
         dodbc.Close_Prepared_Statement( ps );
         dodbc.Disconnect( connection );
      exception 
         when Error : others =>
            Raise_Exception( d.DB_Exception'Identity, 
               "retrieve: exception " & Exception_Information(Error) );
      end; -- exception block
      return l;
   end Retrieve;

   
   --
   -- functions to retrieve records from tables with foreign keys
   -- referencing the table modelled by this package
   --

   --
   -- functions to add something to a criteria
   --
   procedure Add_Username( c : in out d.Criteria; Username : Unbounded_String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "username", op, join, To_String( Username ), 32 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Username;


   procedure Add_Username( c : in out d.Criteria; Username : String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "username", op, join, Username, 32 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Username;


   procedure Add_Run_Id( c : in out d.Criteria; Run_Id : Unbounded_String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "run_id", op, join, To_String( Run_Id ), 60 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Run_Id;


   procedure Add_Run_Id( c : in out d.Criteria; Run_Id : String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "run_id", op, join, Run_Id, 60 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Run_Id;


   procedure Add_Pid( c : in out d.Criteria; Pid : Unbounded_String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "pid", op, join, To_String( Pid ), 60 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Pid;


   procedure Add_Pid( c : in out d.Criteria; Pid : String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "pid", op, join, Pid, 60 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Pid;


   procedure Add_Wave( c : in out d.Criteria; Wave : Unbounded_String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "wave", op, join, To_String( Wave ), 2 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Wave;


   procedure Add_Wave( c : in out d.Criteria; Wave : String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "wave", op, join, Wave, 2 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Wave;


   procedure Add_Hid( c : in out d.Criteria; Hid : Unbounded_String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "hid", op, join, To_String( Hid ), 60 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Hid;


   procedure Add_Hid( c : in out d.Criteria; Hid : String; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "hid", op, join, Hid, 60 );
   begin
      d.add_to_criteria( c, elem );
   end Add_Hid;


   procedure Add_Buno( c : in out d.Criteria; Buno : integer; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "buno", op, join, Buno );
   begin
      d.add_to_criteria( c, elem );
   end Add_Buno;


   procedure Add_Adno( c : in out d.Criteria; Adno : integer; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "adno", op, join, Adno );
   begin
      d.add_to_criteria( c, elem );
   end Add_Adno;


   procedure Add_Lifetime_La_Contributions( c : in out d.Criteria; Lifetime_La_Contributions : Real; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "lifetime_la_contributions", op, join, Lifetime_La_Contributions );
   begin
      d.add_to_criteria( c, elem );
   end Add_Lifetime_La_Contributions;


   procedure Add_Lifetime_Client_Contributions( c : in out d.Criteria; Lifetime_Client_Contributions : Real; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "lifetime_client_contributions", op, join, Lifetime_Client_Contributions );
   begin
      d.add_to_criteria( c, elem );
   end Add_Lifetime_Client_Contributions;


   procedure Add_Lifetime_Gross_Payments( c : in out d.Criteria; Lifetime_Gross_Payments : Real; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "lifetime_gross_payments", op, join, Lifetime_Gross_Payments );
   begin
      d.add_to_criteria( c, elem );
   end Add_Lifetime_Gross_Payments;


   procedure Add_Lifetime_Capital_Contributions( c : in out d.Criteria; Lifetime_Capital_Contributions : Real; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "lifetime_capital_contributions", op, join, Lifetime_Capital_Contributions );
   begin
      d.add_to_criteria( c, elem );
   end Add_Lifetime_Capital_Contributions;


   procedure Add_Highest_La_Contribution( c : in out d.Criteria; Highest_La_Contribution : Real; op : d.operation_type:= d.eq; join : d.join_type := d.join_and ) is   
   elem : d.Criterion := d.make_Criterion_Element( "highest_la_contribution", op, join, Highest_La_Contribution );
   begin
      d.add_to_criteria( c, elem );
   end Add_Highest_La_Contribution;


 
   
   --
   -- functions to add an ordering to a criteria
   --
   procedure Add_Username_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "username", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Username_To_Orderings;


   procedure Add_Run_Id_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "run_id", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Run_Id_To_Orderings;


   procedure Add_Pid_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "pid", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Pid_To_Orderings;


   procedure Add_Wave_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "wave", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Wave_To_Orderings;


   procedure Add_Hid_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "hid", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Hid_To_Orderings;


   procedure Add_Buno_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "buno", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Buno_To_Orderings;


   procedure Add_Adno_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "adno", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Adno_To_Orderings;


   procedure Add_Lifetime_La_Contributions_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "lifetime_la_contributions", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Lifetime_La_Contributions_To_Orderings;


   procedure Add_Lifetime_Client_Contributions_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "lifetime_client_contributions", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Lifetime_Client_Contributions_To_Orderings;


   procedure Add_Lifetime_Gross_Payments_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "lifetime_gross_payments", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Lifetime_Gross_Payments_To_Orderings;


   procedure Add_Lifetime_Capital_Contributions_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "lifetime_capital_contributions", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Lifetime_Capital_Contributions_To_Orderings;


   procedure Add_Highest_La_Contribution_To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc ) is   
   elem : d.Order_By_Element := d.Make_Order_By_Element( "highest_la_contribution", direction  );
   begin
      d.add_to_criteria( c, elem );
   end Add_Highest_La_Contribution_To_Orderings;

   
end Maxima_And_Totals_IO;
